%Inspect.Error{
  message: "got FunctionClauseError with message \"no function clause matching in Inspect.Algebra.concat/2\" while inspecting %{__struct__: Absinthe.Blueprint, adapter: Absinthe.Adapter.LanguageConventions, directives: [], errors: [], execution: %Absinthe.Blueprint.Execution{acc: %{}, adapter: nil, context: %{}, fields_cache: %{}, fragments: %{}, result: nil, root_value: %{}, schema: nil, validation_errors: []}, flags: %{}, fragments: [], initial_phases: [], input: nil, name: nil, operations: [], prototype_schema: Absinthe.Schema.Prototype, result: %{}, schema: MijncmdWeb.Schema, schema_definitions: [%Absinthe.Blueprint.Schema.SchemaDefinition{__private__: [], __reference__: %{location: %{file: \"/Users/nordy/Sites/mijncmd.nl/backend/lib/mijncmd_web/schema.ex\", line: 0}}, description: nil, directive_artifacts: [], directive_definitions: [%{__private__: [], __reference__: %{location: %{file: \"/Users/nordy/Sites/mijncmd.nl/backend/deps/absinthe/lib/absinthe/type/built_ins/directives.ex\", line: 27}, module: Absinthe.Type.BuiltIns.Directives}, __struct__: Absinthe.Blueprint.Schema.DirectiveDefinition, arguments: [%Absinthe.Blueprint.Schema.InputValueDefinition{__private__: [], __reference__: %{location: %{file: \"/Users/nordy/Sites/mijncmd.nl/backend/deps/absinthe/lib/absinthe/type/built_ins/directives.ex\", line: 34}, module: Absinthe.Type.BuiltIns.Directives}, default_value: nil, default_value_blueprint: nil, deprecation: nil, description: \"Skipped when true.\", directives: [], errors: [], flags: %{}, identifier: :if, module: Absinthe.Type.BuiltIns.Directives, name: \"if\", placement: :argument_definition, source_location: nil, type: %Absinthe.Blueprint.TypeReference.NonNull{errors: [], of_type: :boolean}}], description: \"Directs the executor to skip this field or fragment when the `if` argument is true.\", directives: [], errors: [], expand: {:ref, Absinthe.Type.BuiltIns.Directives, {Absinthe.Blueprint.Schema.DirectiveDefinition, :skip}}, identifier: :skip, locations: [:field, :fragment_spread, :inline_fragment], module: Absinthe.Type.BuiltIns.Directives, name: \"skip\", repeatable: false, source_location: nil}, %{__private__: [], __reference__: %{location: %{file: \"/Users/nordy/Sites/mijncmd.nl/backend/deps/absinthe/lib/absinthe/type/built_ins/directives.ex\", line: 7}, module: Absinthe.Type.BuiltIns.Directives}, __struct__: Absinthe.Blueprint.Schema.DirectiveDefinition, arguments: [%Absinthe.Blueprint.Schema.InputValueDefinition{__private__: [], __reference__: %{location: %{file: \"/Users/nordy/Sites/mijncmd.nl/backend/deps/absinthe/lib/absinthe/type/built_ins/directives.ex\", line: 12}, module: Absinthe.Type.BuiltIns.Directives}, default_value: nil, default_value_blueprint: nil, deprecation: nil, description: \"Included when true.\", directives: [], errors: [], flags: %{}, identifier: :if, module: Absinthe.Type.BuiltIns.Directives, name: \"if\", placement: :argument_definition, source_location: nil, type: %Absinthe.Blueprint.TypeReference.NonNull{errors: [], of_type: :boolean}}], description: \"Directs the executor to include this field or fragment only when the `if` argument is true.\", directives: [], errors: [], expand: {:ref, Absinthe.Type.BuiltIns.Directives, {Absinthe.Blueprint.Schema.DirectiveDefinition, :include}}, identifier: :include, locations: [:field, :fragment_spread, :inline_fragment], module: Absinthe.Type.BuiltIns.Directives, name: \"include\", repeatable: false, source_location: nil}], directives: [], errors: [], flags: %{}, imports: [{MijncmdWeb.Schema.UserTypes, []}, {Absinthe.Type.Custom, []}], module: MijncmdWeb.Schema, schema_declaration: nil, source_location: nil, type_artifacts: [], type_definitions: [\"\"\"\nThe `Time` scalar type represents a time. The Time appears in a JSON\nresponse as an ISO8601 formatted string, without a date component.\n\"\"\"\nscalar Time\n, \"\"\"\nThe `ID` scalar type represents a unique identifier, often used to\nrefetch an object or as key for a cache. The ID type appears in a JSON\nresponse as a String; however, it is not intended to be human-readable.\nWhen expected as an input type, any string (such as `\"4\"`) or " <> ...
}